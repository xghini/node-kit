export const exefile: string;
export const exedir: string;
export const exeroot: any;
export const metaroot: any;
export function xpath(targetPath: any, basePath?: string, separator?: string): string;
export function fileurl2path(url: string): string;
export function now(): number;
export function sleep(ms: number): Promise<void>;
export function interval(fn: Function, ms: number, PX?: number): Promise<void>;
export function timelog(fn: any): Promise<void>;
export function getDate(offset?: number): string;
export const ttl: TTLMap;
export class TTLMap {
    storage: Map<any, any>;
    expiry_map: Map<any, any>;
    expiry_arr: any[];
    lastCleanup: number;
    cleanupInterval: number;
    set(key: any, value: any, ttl: any): this;
    get(key: any): any;
    delete(key: any): boolean;
    _lazyCleanup(): void;
    _siftDown(index: any): void;
    _siftUp(index: any): void;
    _removeFromHeap(): void;
}
export function rf(filename: string, option?: string): string | null;
export function wf(filename: string, data: string | Buffer, append?: boolean, option?: string): boolean;
export function mkdir(dir: any): undefined;
export function isdir(path: string): boolean | undefined;
export function isfile(path: string): boolean | undefined;
export function dir(path: string): string[] | undefined;
export function exist(path: string): boolean;
export function rm(targetPath: string): undefined;
export function cp(oldPath: string, newPath: string): void;
export function env(filePath: string, cover?: boolean): Promise<object>;
export function exe(command: any, log?: boolean): Promise<any>;
export function arf(filename: any, option?: string): Promise<Buffer<ArrayBufferLike> & string>;
export function awf(filename: any, data: any, append?: boolean, option?: string): Promise<boolean>;
export function amkdir(dir: any): Promise<string>;
export function aisdir(path: any): Promise<boolean>;
export function aisfile(path: any): Promise<boolean>;
export function adir(path: any): Promise<string[]>;
export function aexist(path: any): Promise<boolean>;
export function arm(targetPath: any, confirm?: boolean): Promise<boolean>;
export function aonedir(dir: any): Promise<string>;
export function astat(path: any): Promise<fs.Stats>;
export function aloadyml(filePath: string): Promise<any>;
export function aloadjson(filePath: any): Promise<any>;
export function cookie_obj(str: any): {
    value: {};
    flags: {};
};
export function cookie_str(obj: any): string;
export function cookie_merge(str1: any, str2: any): string;
export function cookies_obj(str: any): any;
export function cookies_str(obj: any): string;
export function cookies_merge(str1: any, str2: any): string;
export function mreplace(str: string, replacements: Array<[string | RegExp, string]>): string;
export function mreplace_calc(str: string, replacements: Array<[string | RegExp, string]>): [string, Array<[number, string | RegExp]>, Array<[number, string]>];
export function xreq(path: string): object;
export function ast_jsbuild(code: string): string;
export function gcatch(open?: boolean): void;
export function uuid(len?: number): string;
export function rint(a: any, b?: number): any;
export function rside(): 1 | -1;
export function gchar(n?: number, characters?: number): string;
export function fhash(cx: string | Buffer | TypedArray | DataView, encode?: string, type?: string): string;
export function empty(x: any, recursive?: any): bool;
export function addobjs(...objects: any[]): {};
export function obj2v1(obj2v: any): {
    [k: string]: any;
};
export function addTwoDimensionalObjects(...objects: any[]): {};
import fs from "fs";
